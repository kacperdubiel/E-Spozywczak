// <auto-generated />
using System;
using E_Spożywczak.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace E_Spożywczak.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("E_Spożywczak.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("Id");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("E_Spożywczak.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DeliveryTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("E_Spożywczak.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOrderPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrdersHistoryId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfPayment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("DeliveryId");

                    b.HasIndex("OrdersHistoryId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("E_Spożywczak.Models.OrdersHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("Id");

                    b.ToTable("OrderHistory");
                });

            modelBuilder.Entity("E_Spożywczak.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Availability")
                        .HasColumnType("float");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MeasureType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Availability = 50.0,
                            ImagePath = "baton_mars.jpg",
                            IsAvailable = true,
                            MeasureType = 0,
                            Name = "Baton Mars",
                            Price = 2.30m,
                            ProductCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            Availability = 60.0,
                            ImagePath = "milky_way.jpg",
                            IsAvailable = true,
                            MeasureType = 0,
                            Name = "Baton MilkyWay",
                            Price = 1.90m,
                            ProductCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            Availability = 70.0,
                            ImagePath = "baton_snickers.jpg",
                            IsAvailable = true,
                            MeasureType = 0,
                            Name = "Baton Snickers",
                            Price = 2.10m,
                            ProductCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            Availability = 40.0,
                            ImagePath = "jablko.jpg",
                            IsAvailable = true,
                            MeasureType = 1,
                            Name = "Jabłko Gala",
                            Price = 3.62m,
                            ProductCategoryId = 2
                        },
                        new
                        {
                            Id = 5,
                            Availability = 40.0,
                            ImagePath = "sos_bolognese.jpg",
                            IsAvailable = true,
                            MeasureType = 1,
                            Name = "Sos Bolognese",
                            Price = 5.30m,
                            ProductCategoryId = 6
                        });
                });

            modelBuilder.Entity("E_Spożywczak.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Słodycze"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Owoce"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pieczywo"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Makarony"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sery"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sosy"
                        });
                });

            modelBuilder.Entity("E_Spożywczak.Models.ProductInCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<double>("ProductAmount")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInCart");
                });

            modelBuilder.Entity("E_Spożywczak.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Rating");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Message = "Bardzo dobre jabłka!",
                            ProductId = 2,
                            Rate = 4,
                            RatingDate = new DateTime(2021, 1, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            Message = "Baton przeterminowany.",
                            ProductId = 1,
                            Rate = 1,
                            RatingDate = new DateTime(2021, 1, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("E_Spożywczak.Models.Order", b =>
                {
                    b.HasOne("E_Spożywczak.Models.Cart", "Cart")
                        .WithOne("Order")
                        .HasForeignKey("E_Spożywczak.Models.Order", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Spożywczak.Models.Delivery", "Delivery")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Spożywczak.Models.OrdersHistory", "OrdersHistory")
                        .WithMany("Orders")
                        .HasForeignKey("OrdersHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Delivery");

                    b.Navigation("OrdersHistory");
                });

            modelBuilder.Entity("E_Spożywczak.Models.Product", b =>
                {
                    b.HasOne("E_Spożywczak.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("E_Spożywczak.Models.ProductInCart", b =>
                {
                    b.HasOne("E_Spożywczak.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Spożywczak.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Spożywczak.Models.Rating", b =>
                {
                    b.HasOne("E_Spożywczak.Models.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Spożywczak.Models.Cart", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("E_Spożywczak.Models.Delivery", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("E_Spożywczak.Models.OrdersHistory", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("E_Spożywczak.Models.Product", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("E_Spożywczak.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
